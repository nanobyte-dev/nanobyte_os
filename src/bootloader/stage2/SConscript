import os

from SCons.Environment import Environment
from build_scripts.utility import GlobRecursive, FindIndex, IsFileName

Import('TARGET_ENVIRONMENT')
TARGET_ENVIRONMENT: Environment

env = TARGET_ENVIRONMENT.Clone()
env.Append(
    LINKFLAGS = [
        '-Wl,-T', env.File('linker.ld').srcnode().path,
        '-Wl,-Map=' + env.File('stage2.map').path
    ],
    CPPDEFINES = [
        'ETL_NO_STL',
        'ETL_LOG_ERRORS',
    ],
    CPPPATH = [
        env.Dir('.').srcnode(),
        env.Dir('#/src/libs/c').srcnode(),
        env.Dir('#/src/libs').srcnode(),
        env.Dir('#/thirdparty/etl/include').srcnode(),
    ],
    ASFLAGS = [ '-I', env.Dir('.').srcnode() ]
)

sources = GlobRecursive(env, '*.c') + \
          GlobRecursive(env, '*.cpp') + \
          GlobRecursive(env, '*.asm')

headers = GlobRecursive(env, '*.h') + \
          GlobRecursive(env, '*.hpp') + \
          GlobRecursive(env, '*.inc')

objects = env.Object(sources)

obj_crti = objects.pop(FindIndex(objects, lambda item: IsFileName(item, 'crti.o')))
obj_crtn = objects.pop(FindIndex(objects, lambda item: IsFileName(item, 'crtn.o')))

Import('libc')
Import('libcore')

static_libs = [
    libc,
    libcore,
]

objects = [
    obj_crti,
    os.path.join(env["TOOLCHAIN_LIBGCC"], 'crtbegin.o'),
    *objects,
    *static_libs,
    os.path.join(env["TOOLCHAIN_LIBGCC"], 'crtend.o'),
    obj_crtn
]

stage2 = env.Program('stage2.elf', objects)
env.Depends(stage2, headers)

Export('stage2')